# coding: utf-8

"""
    BDL API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def data_by_unit_get(self, unit_id, var_id, **kwargs):  # noqa: E501
        """Dane dla jednej jednostki terytorialnej / Data for single territorial unit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_by_unit_get(unit_id, var_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unit_id: Id jednostki terytorialnej / Territorial unit id (required)
        :param list[int] var_id: Lista Id zmiennych / Variable Id list (required)
        :param list[int] year: Lista lat / Years list
        :param int aggregate_id: Id poziomu agregacji / Aggregation level Id
        :param int page: Indeks strony / Page index
        :param int page_size: Rozmiar strony / Page size
        :param str lang: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept-Language\" jest ignorowany) / Expected response conent language - optional (if parameter specified, request header \"Accept-Language\" is ignored)
        :param str format: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept\" jest ignorowany) / Expected response content type - optional (if parameter specified, request header \"Accept\" is ignored)
        :param str accept_language: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr \"lang\", nagłówek \"Accept-Language\" zostanie ignorowany) / Expected response conent language - optional (if \"lang\" parameter is specified, the \"Accept-Language\" header will be ignored)
        :param str accept: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr \"format\", nagłówek \"Accept\" zostanie zignorowany) / Expected response content type - optional (if the \"format\" parameter is specified, the \"Accept\" header will be ignored)
        :param str if_none_match: Nagłówek warunkowego żadania If-None-Match (entity tag)/Conditional Requests header If-None-Match (entity tag)
        :param str if_modified_since: Nagłówek warunkowego żadania If-Modified-Since/Conditional Requests header If-Modified-Since
        :return: SingleUnitData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_by_unit_get_with_http_info(unit_id, var_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_by_unit_get_with_http_info(unit_id, var_id, **kwargs)  # noqa: E501
            return data

    def data_by_unit_get_with_http_info(self, unit_id, var_id, **kwargs):  # noqa: E501
        """Dane dla jednej jednostki terytorialnej / Data for single territorial unit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_by_unit_get_with_http_info(unit_id, var_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unit_id: Id jednostki terytorialnej / Territorial unit id (required)
        :param list[int] var_id: Lista Id zmiennych / Variable Id list (required)
        :param list[int] year: Lista lat / Years list
        :param int aggregate_id: Id poziomu agregacji / Aggregation level Id
        :param int page: Indeks strony / Page index
        :param int page_size: Rozmiar strony / Page size
        :param str lang: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept-Language\" jest ignorowany) / Expected response conent language - optional (if parameter specified, request header \"Accept-Language\" is ignored)
        :param str format: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept\" jest ignorowany) / Expected response content type - optional (if parameter specified, request header \"Accept\" is ignored)
        :param str accept_language: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr \"lang\", nagłówek \"Accept-Language\" zostanie ignorowany) / Expected response conent language - optional (if \"lang\" parameter is specified, the \"Accept-Language\" header will be ignored)
        :param str accept: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr \"format\", nagłówek \"Accept\" zostanie zignorowany) / Expected response content type - optional (if the \"format\" parameter is specified, the \"Accept\" header will be ignored)
        :param str if_none_match: Nagłówek warunkowego żadania If-None-Match (entity tag)/Conditional Requests header If-None-Match (entity tag)
        :param str if_modified_since: Nagłówek warunkowego żadania If-Modified-Since/Conditional Requests header If-Modified-Since
        :return: SingleUnitData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unit_id', 'var_id', 'year', 'aggregate_id', 'page', 'page_size', 'lang', 'format', 'accept_language', 'accept', 'if_none_match', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_by_unit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unit_id' is set
        if ('unit_id' not in params or
                params['unit_id'] is None):
            raise ValueError("Missing the required parameter `unit_id` when calling `data_by_unit_get`")  # noqa: E501
        # verify the required parameter 'var_id' is set
        if ('var_id' not in params or
                params['var_id'] is None):
            raise ValueError("Missing the required parameter `var_id` when calling `data_by_unit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unit_id' in params:
            path_params['unit-id'] = params['unit_id']  # noqa: E501

        query_params = []
        if 'var_id' in params:
            query_params.append(('var-id', params['var_id']))  # noqa: E501
            collection_formats['var-id'] = 'multi'  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
            collection_formats['year'] = 'multi'  # noqa: E501
        if 'aggregate_id' in params:
            query_params.append(('aggregate-id', params['aggregate_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page-size', params['page_size']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.api+json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data/by-unit/{unit-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleUnitData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_by_variable_get(self, var_id, **kwargs):  # noqa: E501
        """Dane dla jednej zmiennej / Data for single variable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_by_variable_get(var_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int var_id: Id zmiennej / Variable Id (required)
        :param list[int] year: Lista lat / Years list
        :param str unit_parent_id: Identyfikator nadrzędnej jednostki terytorialnej / Paren's territorial units Id
        :param int unit_level: Poziom jednostek terytorialnych / Territorial units level
        :param int aggregate_id: Id poziomu agregacji / Aggregation level Id
        :param int page: Indeks strony / Page index
        :param int page_size: Rozmiar strony / Page size
        :param str lang: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept-Language\" jest ignorowany) / Expected response conent language - optional (if parameter specified, request header \"Accept-Language\" is ignored)
        :param str format: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept\" jest ignorowany) / Expected response content type - optional (if parameter specified, request header \"Accept\" is ignored)
        :param str accept_language: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr \"lang\", nagłówek \"Accept-Language\" zostanie ignorowany) / Expected response conent language - optional (if \"lang\" parameter is specified, the \"Accept-Language\" header will be ignored)
        :param str accept: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr \"format\", nagłówek \"Accept\" zostanie zignorowany) / Expected response content type - optional (if the \"format\" parameter is specified, the \"Accept\" header will be ignored)
        :param str if_none_match: Nagłówek warunkowego żadania If-None-Match (entity tag)/Conditional Requests header If-None-Match (entity tag)
        :param str if_modified_since: Nagłówek warunkowego żadania If-Modified-Since/Conditional Requests header If-Modified-Since
        :return: SingleVariableData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_by_variable_get_with_http_info(var_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_by_variable_get_with_http_info(var_id, **kwargs)  # noqa: E501
            return data

    def data_by_variable_get_with_http_info(self, var_id, **kwargs):  # noqa: E501
        """Dane dla jednej zmiennej / Data for single variable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_by_variable_get_with_http_info(var_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int var_id: Id zmiennej / Variable Id (required)
        :param list[int] year: Lista lat / Years list
        :param str unit_parent_id: Identyfikator nadrzędnej jednostki terytorialnej / Paren's territorial units Id
        :param int unit_level: Poziom jednostek terytorialnych / Territorial units level
        :param int aggregate_id: Id poziomu agregacji / Aggregation level Id
        :param int page: Indeks strony / Page index
        :param int page_size: Rozmiar strony / Page size
        :param str lang: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept-Language\" jest ignorowany) / Expected response conent language - optional (if parameter specified, request header \"Accept-Language\" is ignored)
        :param str format: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept\" jest ignorowany) / Expected response content type - optional (if parameter specified, request header \"Accept\" is ignored)
        :param str accept_language: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr \"lang\", nagłówek \"Accept-Language\" zostanie ignorowany) / Expected response conent language - optional (if \"lang\" parameter is specified, the \"Accept-Language\" header will be ignored)
        :param str accept: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr \"format\", nagłówek \"Accept\" zostanie zignorowany) / Expected response content type - optional (if the \"format\" parameter is specified, the \"Accept\" header will be ignored)
        :param str if_none_match: Nagłówek warunkowego żadania If-None-Match (entity tag)/Conditional Requests header If-None-Match (entity tag)
        :param str if_modified_since: Nagłówek warunkowego żadania If-Modified-Since/Conditional Requests header If-Modified-Since
        :return: SingleVariableData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['var_id', 'year', 'unit_parent_id', 'unit_level', 'aggregate_id', 'page', 'page_size', 'lang', 'format', 'accept_language', 'accept', 'if_none_match', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_by_variable_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'var_id' is set
        if ('var_id' not in params or
                params['var_id'] is None):
            raise ValueError("Missing the required parameter `var_id` when calling `data_by_variable_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'var_id' in params:
            path_params['var-id'] = params['var_id']  # noqa: E501

        query_params = []
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
            collection_formats['year'] = 'multi'  # noqa: E501
        if 'unit_parent_id' in params:
            query_params.append(('unit-parent-id', params['unit_parent_id']))  # noqa: E501
        if 'unit_level' in params:
            query_params.append(('unit-level', params['unit_level']))  # noqa: E501
        if 'aggregate_id' in params:
            query_params.append(('aggregate-id', params['aggregate_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page-size', params['page_size']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.api+json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data/by-variable/{var-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleVariableData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_localities_by_unit_get(self, unit_id, var_id, **kwargs):  # noqa: E501
        """Dane dla jednej miejscowości statystycznej / Data for single statistical locality  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_localities_by_unit_get(unit_id, var_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unit_id: Id miejscowości statystycznej / Statistical locality id (required)
        :param list[int] var_id: Lista Id zmiennych / Variable Id list (required)
        :param list[int] year: Lista lat / Years list
        :param int aggregate_id: Id poziomu agregacji / Aggregation level Id
        :param int page: Indeks strony / Page index
        :param int page_size: Rozmiar strony / Page size
        :param str lang: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept-Language\" jest ignorowany) / Expected response conent language - optional (if parameter specified, request header \"Accept-Language\" is ignored)
        :param str format: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept\" jest ignorowany) / Expected response content type - optional (if parameter specified, request header \"Accept\" is ignored)
        :param str accept_language: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr \"lang\", nagłówek \"Accept-Language\" zostanie ignorowany) / Expected response conent language - optional (if \"lang\" parameter is specified, the \"Accept-Language\" header will be ignored)
        :param str accept: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr \"format\", nagłówek \"Accept\" zostanie zignorowany) / Expected response content type - optional (if the \"format\" parameter is specified, the \"Accept\" header will be ignored)
        :param str if_none_match: Nagłówek warunkowego żadania If-None-Match (entity tag)/Conditional Requests header If-None-Match (entity tag)
        :param str if_modified_since: Nagłówek warunkowego żadania If-Modified-Since/Conditional Requests header If-Modified-Since
        :return: SingleUnitData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_localities_by_unit_get_with_http_info(unit_id, var_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_localities_by_unit_get_with_http_info(unit_id, var_id, **kwargs)  # noqa: E501
            return data

    def data_localities_by_unit_get_with_http_info(self, unit_id, var_id, **kwargs):  # noqa: E501
        """Dane dla jednej miejscowości statystycznej / Data for single statistical locality  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_localities_by_unit_get_with_http_info(unit_id, var_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unit_id: Id miejscowości statystycznej / Statistical locality id (required)
        :param list[int] var_id: Lista Id zmiennych / Variable Id list (required)
        :param list[int] year: Lista lat / Years list
        :param int aggregate_id: Id poziomu agregacji / Aggregation level Id
        :param int page: Indeks strony / Page index
        :param int page_size: Rozmiar strony / Page size
        :param str lang: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept-Language\" jest ignorowany) / Expected response conent language - optional (if parameter specified, request header \"Accept-Language\" is ignored)
        :param str format: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept\" jest ignorowany) / Expected response content type - optional (if parameter specified, request header \"Accept\" is ignored)
        :param str accept_language: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr \"lang\", nagłówek \"Accept-Language\" zostanie ignorowany) / Expected response conent language - optional (if \"lang\" parameter is specified, the \"Accept-Language\" header will be ignored)
        :param str accept: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr \"format\", nagłówek \"Accept\" zostanie zignorowany) / Expected response content type - optional (if the \"format\" parameter is specified, the \"Accept\" header will be ignored)
        :param str if_none_match: Nagłówek warunkowego żadania If-None-Match (entity tag)/Conditional Requests header If-None-Match (entity tag)
        :param str if_modified_since: Nagłówek warunkowego żadania If-Modified-Since/Conditional Requests header If-Modified-Since
        :return: SingleUnitData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unit_id', 'var_id', 'year', 'aggregate_id', 'page', 'page_size', 'lang', 'format', 'accept_language', 'accept', 'if_none_match', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_localities_by_unit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unit_id' is set
        if ('unit_id' not in params or
                params['unit_id'] is None):
            raise ValueError("Missing the required parameter `unit_id` when calling `data_localities_by_unit_get`")  # noqa: E501
        # verify the required parameter 'var_id' is set
        if ('var_id' not in params or
                params['var_id'] is None):
            raise ValueError("Missing the required parameter `var_id` when calling `data_localities_by_unit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unit_id' in params:
            path_params['unit-id'] = params['unit_id']  # noqa: E501

        query_params = []
        if 'var_id' in params:
            query_params.append(('var-id', params['var_id']))  # noqa: E501
            collection_formats['var-id'] = 'multi'  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
            collection_formats['year'] = 'multi'  # noqa: E501
        if 'aggregate_id' in params:
            query_params.append(('aggregate-id', params['aggregate_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page-size', params['page_size']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.api+json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data/localities/by-unit/{unit-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleUnitData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_localities_by_variable_get(self, var_id, unit_parent_id, **kwargs):  # noqa: E501
        """Dane dla miejscowości statystycznych dla jednej zmiennej / Data for statistical localities for single variable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_localities_by_variable_get(var_id, unit_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int var_id: Id zmiennej / Variable Id (required)
        :param str unit_parent_id: Identyfikator nadrzędnej jednostki terytorialnej / Paren's territorial units Id (required)
        :param list[int] year: Lista lat / Years list
        :param int page: Indeks strony / Page index
        :param int page_size: Rozmiar strony / Page size
        :param str lang: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept-Language\" jest ignorowany) / Expected response conent language - optional (if parameter specified, request header \"Accept-Language\" is ignored)
        :param str format: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept\" jest ignorowany) / Expected response content type - optional (if parameter specified, request header \"Accept\" is ignored)
        :param str accept_language: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr \"lang\", nagłówek \"Accept-Language\" zostanie ignorowany) / Expected response conent language - optional (if \"lang\" parameter is specified, the \"Accept-Language\" header will be ignored)
        :param str accept: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr \"format\", nagłówek \"Accept\" zostanie zignorowany) / Expected response content type - optional (if the \"format\" parameter is specified, the \"Accept\" header will be ignored)
        :param str if_none_match: Nagłówek warunkowego żadania If-None-Match (entity tag)/Conditional Requests header If-None-Match (entity tag)
        :param str if_modified_since: Nagłówek warunkowego żadania If-Modified-Since/Conditional Requests header If-Modified-Since
        :return: SingleVariableData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_localities_by_variable_get_with_http_info(var_id, unit_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_localities_by_variable_get_with_http_info(var_id, unit_parent_id, **kwargs)  # noqa: E501
            return data

    def data_localities_by_variable_get_with_http_info(self, var_id, unit_parent_id, **kwargs):  # noqa: E501
        """Dane dla miejscowości statystycznych dla jednej zmiennej / Data for statistical localities for single variable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_localities_by_variable_get_with_http_info(var_id, unit_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int var_id: Id zmiennej / Variable Id (required)
        :param str unit_parent_id: Identyfikator nadrzędnej jednostki terytorialnej / Paren's territorial units Id (required)
        :param list[int] year: Lista lat / Years list
        :param int page: Indeks strony / Page index
        :param int page_size: Rozmiar strony / Page size
        :param str lang: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept-Language\" jest ignorowany) / Expected response conent language - optional (if parameter specified, request header \"Accept-Language\" is ignored)
        :param str format: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept\" jest ignorowany) / Expected response content type - optional (if parameter specified, request header \"Accept\" is ignored)
        :param str accept_language: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr \"lang\", nagłówek \"Accept-Language\" zostanie ignorowany) / Expected response conent language - optional (if \"lang\" parameter is specified, the \"Accept-Language\" header will be ignored)
        :param str accept: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr \"format\", nagłówek \"Accept\" zostanie zignorowany) / Expected response content type - optional (if the \"format\" parameter is specified, the \"Accept\" header will be ignored)
        :param str if_none_match: Nagłówek warunkowego żadania If-None-Match (entity tag)/Conditional Requests header If-None-Match (entity tag)
        :param str if_modified_since: Nagłówek warunkowego żadania If-Modified-Since/Conditional Requests header If-Modified-Since
        :return: SingleVariableData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['var_id', 'unit_parent_id', 'year', 'page', 'page_size', 'lang', 'format', 'accept_language', 'accept', 'if_none_match', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_localities_by_variable_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'var_id' is set
        if ('var_id' not in params or
                params['var_id'] is None):
            raise ValueError("Missing the required parameter `var_id` when calling `data_localities_by_variable_get`")  # noqa: E501
        # verify the required parameter 'unit_parent_id' is set
        if ('unit_parent_id' not in params or
                params['unit_parent_id'] is None):
            raise ValueError("Missing the required parameter `unit_parent_id` when calling `data_localities_by_variable_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'var_id' in params:
            path_params['var-id'] = params['var_id']  # noqa: E501

        query_params = []
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
            collection_formats['year'] = 'multi'  # noqa: E501
        if 'unit_parent_id' in params:
            query_params.append(('unit-parent-id', params['unit_parent_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page-size', params['page_size']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.api+json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data/localities/by-variable/{var-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleVariableData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_metadata_get(self, **kwargs):  # noqa: E501
        """Metadane / Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_metadata_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept-Language\" jest ignorowany) / Expected response conent language - optional (if parameter specified, request header \"Accept-Language\" is ignored)
        :param str format: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept\" jest ignorowany) / Expected response content type - optional (if parameter specified, request header \"Accept\" is ignored)
        :param str accept_language: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr \"lang\", nagłówek \"Accept-Language\" zostanie ignorowany) / Expected response conent language - optional (if \"lang\" parameter is specified, the \"Accept-Language\" header will be ignored)
        :param str accept: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr \"format\", nagłówek \"Accept\" zostanie zignorowany) / Expected response content type - optional (if the \"format\" parameter is specified, the \"Accept\" header will be ignored)
        :param str if_none_match: Nagłówek warunkowego żadania If-None-Match (entity tag)/Conditional Requests header If-None-Match (entity tag)
        :param str if_modified_since: Nagłówek warunkowego żadania If-Modified-Since/Conditional Requests header If-Modified-Since
        :return: Metadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_metadata_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_metadata_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_metadata_get_with_http_info(self, **kwargs):  # noqa: E501
        """Metadane / Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_metadata_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept-Language\" jest ignorowany) / Expected response conent language - optional (if parameter specified, request header \"Accept-Language\" is ignored)
        :param str format: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr, nagłówek \"Accept\" jest ignorowany) / Expected response content type - optional (if parameter specified, request header \"Accept\" is ignored)
        :param str accept_language: Oczekiwany język odpowiedzi - opcjonalny (jeśli podano parametr \"lang\", nagłówek \"Accept-Language\" zostanie ignorowany) / Expected response conent language - optional (if \"lang\" parameter is specified, the \"Accept-Language\" header will be ignored)
        :param str accept: Oczekiwany format odpowiedzi - opcjonalny (jeśli podano parametr \"format\", nagłówek \"Accept\" zostanie zignorowany) / Expected response content type - optional (if the \"format\" parameter is specified, the \"Accept\" header will be ignored)
        :param str if_none_match: Nagłówek warunkowego żadania If-None-Match (entity tag)/Conditional Requests header If-None-Match (entity tag)
        :param str if_modified_since: Nagłówek warunkowego żadania If-Modified-Since/Conditional Requests header If-Modified-Since
        :return: Metadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lang', 'format', 'accept_language', 'accept', 'if_none_match', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_metadata_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Metadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
