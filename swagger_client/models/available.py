# coding: utf-8

"""
    BDL API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Available(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'year': 'str',
        'levels': 'list[int]',
        'quarterly': 'str'
    }

    attribute_map = {
        'year': 'year',
        'levels': 'levels',
        'quarterly': 'quarterly'
    }

    def __init__(self, year=None, levels=None, quarterly=None):  # noqa: E501
        """Available - a model defined in Swagger"""  # noqa: E501

        self._year = None
        self._levels = None
        self._quarterly = None
        self.discriminator = None

        if year is not None:
            self.year = year
        if levels is not None:
            self.levels = levels
        if quarterly is not None:
            self.quarterly = quarterly

    @property
    def year(self):
        """Gets the year of this Available.  # noqa: E501

        Rok / Year  # noqa: E501

        :return: The year of this Available.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Available.

        Rok / Year  # noqa: E501

        :param year: The year of this Available.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def levels(self):
        """Gets the levels of this Available.  # noqa: E501

        Poziomy dostępności / Availability levels  # noqa: E501

        :return: The levels of this Available.  # noqa: E501
        :rtype: list[int]
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """Sets the levels of this Available.

        Poziomy dostępności / Availability levels  # noqa: E501

        :param levels: The levels of this Available.  # noqa: E501
        :type: list[int]
        """

        self._levels = levels

    @property
    def quarterly(self):
        """Gets the quarterly of this Available.  # noqa: E501

        Dane roczne czy kwartalne / Yearly or quarterly data  # noqa: E501

        :return: The quarterly of this Available.  # noqa: E501
        :rtype: str
        """
        return self._quarterly

    @quarterly.setter
    def quarterly(self, quarterly):
        """Sets the quarterly of this Available.

        Dane roczne czy kwartalne / Yearly or quarterly data  # noqa: E501

        :param quarterly: The quarterly of this Available.  # noqa: E501
        :type: str
        """

        self._quarterly = quarterly

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Available, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Available):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
