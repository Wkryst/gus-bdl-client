# coding: utf-8

"""
    BDL API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Version(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'major': 'int',
        'minor': 'int',
        'date_modified': 'datetime',
        'deprecated': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'major': 'major',
        'minor': 'minor',
        'date_modified': 'dateModified',
        'deprecated': 'deprecated'
    }

    def __init__(self, id=None, major=None, minor=None, date_modified=None, deprecated=None):  # noqa: E501
        """Version - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._major = None
        self._minor = None
        self._date_modified = None
        self._deprecated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if major is not None:
            self.major = major
        if minor is not None:
            self.minor = minor
        if date_modified is not None:
            self.date_modified = date_modified
        if deprecated is not None:
            self.deprecated = deprecated

    @property
    def id(self):
        """Gets the id of this Version.  # noqa: E501

        Pełny numer wersji / Full version number  # noqa: E501

        :return: The id of this Version.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Version.

        Pełny numer wersji / Full version number  # noqa: E501

        :param id: The id of this Version.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def major(self):
        """Gets the major of this Version.  # noqa: E501

        Numer główny wersji / The main version number  # noqa: E501

        :return: The major of this Version.  # noqa: E501
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this Version.

        Numer główny wersji / The main version number  # noqa: E501

        :param major: The major of this Version.  # noqa: E501
        :type: int
        """

        self._major = major

    @property
    def minor(self):
        """Gets the minor of this Version.  # noqa: E501

        Numer dodatkowy wersji / The additional version number  # noqa: E501

        :return: The minor of this Version.  # noqa: E501
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """Sets the minor of this Version.

        Numer dodatkowy wersji / The additional version number  # noqa: E501

        :param minor: The minor of this Version.  # noqa: E501
        :type: int
        """

        self._minor = minor

    @property
    def date_modified(self):
        """Gets the date_modified of this Version.  # noqa: E501

        Data ostatniej modyfikacji / Date of the last modification  # noqa: E501

        :return: The date_modified of this Version.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this Version.

        Data ostatniej modyfikacji / Date of the last modification  # noqa: E501

        :param date_modified: The date_modified of this Version.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def deprecated(self):
        """Gets the deprecated of this Version.  # noqa: E501

        Data wycofania / Date of the deprecation  # noqa: E501

        :return: The deprecated of this Version.  # noqa: E501
        :rtype: datetime
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this Version.

        Data wycofania / Date of the deprecation  # noqa: E501

        :param deprecated: The deprecated of this Version.  # noqa: E501
        :type: datetime
        """

        self._deprecated = deprecated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Version, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Version):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
