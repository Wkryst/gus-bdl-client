# coding: utf-8

"""
    BDL API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VariableDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'subject_id': 'str',
        'n1': 'str',
        'n2': 'str',
        'n3': 'str',
        'n4': 'str',
        'n5': 'str',
        'level': 'int',
        'measure_unit_id': 'int',
        'measure_unit_name': 'str',
        'description': 'str',
        'years': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'subject_id': 'subjectId',
        'n1': 'n1',
        'n2': 'n2',
        'n3': 'n3',
        'n4': 'n4',
        'n5': 'n5',
        'level': 'level',
        'measure_unit_id': 'measureUnitId',
        'measure_unit_name': 'measureUnitName',
        'description': 'description',
        'years': 'years'
    }

    def __init__(self, id=None, subject_id=None, n1=None, n2=None, n3=None, n4=None, n5=None, level=None, measure_unit_id=None, measure_unit_name=None, description=None, years=None):  # noqa: E501
        """VariableDetails - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._subject_id = None
        self._n1 = None
        self._n2 = None
        self._n3 = None
        self._n4 = None
        self._n5 = None
        self._level = None
        self._measure_unit_id = None
        self._measure_unit_name = None
        self._description = None
        self._years = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subject_id is not None:
            self.subject_id = subject_id
        if n1 is not None:
            self.n1 = n1
        if n2 is not None:
            self.n2 = n2
        if n3 is not None:
            self.n3 = n3
        if n4 is not None:
            self.n4 = n4
        if n5 is not None:
            self.n5 = n5
        if level is not None:
            self.level = level
        if measure_unit_id is not None:
            self.measure_unit_id = measure_unit_id
        if measure_unit_name is not None:
            self.measure_unit_name = measure_unit_name
        if description is not None:
            self.description = description
        if years is not None:
            self.years = years

    @property
    def id(self):
        """Gets the id of this VariableDetails.  # noqa: E501

        Identyfikator cechy / Variable identifier  # noqa: E501

        :return: The id of this VariableDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VariableDetails.

        Identyfikator cechy / Variable identifier  # noqa: E501

        :param id: The id of this VariableDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def subject_id(self):
        """Gets the subject_id of this VariableDetails.  # noqa: E501

        Identyfikator tematu / Subject identifier  # noqa: E501

        :return: The subject_id of this VariableDetails.  # noqa: E501
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this VariableDetails.

        Identyfikator tematu / Subject identifier  # noqa: E501

        :param subject_id: The subject_id of this VariableDetails.  # noqa: E501
        :type: str
        """

        self._subject_id = subject_id

    @property
    def n1(self):
        """Gets the n1 of this VariableDetails.  # noqa: E501

        Nazwa pierwszego wymiaru / The name of the first dimension  # noqa: E501

        :return: The n1 of this VariableDetails.  # noqa: E501
        :rtype: str
        """
        return self._n1

    @n1.setter
    def n1(self, n1):
        """Sets the n1 of this VariableDetails.

        Nazwa pierwszego wymiaru / The name of the first dimension  # noqa: E501

        :param n1: The n1 of this VariableDetails.  # noqa: E501
        :type: str
        """

        self._n1 = n1

    @property
    def n2(self):
        """Gets the n2 of this VariableDetails.  # noqa: E501

        Nazwa drugiego wymiaru / The name of the second dimension  # noqa: E501

        :return: The n2 of this VariableDetails.  # noqa: E501
        :rtype: str
        """
        return self._n2

    @n2.setter
    def n2(self, n2):
        """Sets the n2 of this VariableDetails.

        Nazwa drugiego wymiaru / The name of the second dimension  # noqa: E501

        :param n2: The n2 of this VariableDetails.  # noqa: E501
        :type: str
        """

        self._n2 = n2

    @property
    def n3(self):
        """Gets the n3 of this VariableDetails.  # noqa: E501

        Nazwa trzeciego wymiaru / The name of the third dimension  # noqa: E501

        :return: The n3 of this VariableDetails.  # noqa: E501
        :rtype: str
        """
        return self._n3

    @n3.setter
    def n3(self, n3):
        """Sets the n3 of this VariableDetails.

        Nazwa trzeciego wymiaru / The name of the third dimension  # noqa: E501

        :param n3: The n3 of this VariableDetails.  # noqa: E501
        :type: str
        """

        self._n3 = n3

    @property
    def n4(self):
        """Gets the n4 of this VariableDetails.  # noqa: E501

        Nazwa czwartego wymiaru / The name of the fourth dimension  # noqa: E501

        :return: The n4 of this VariableDetails.  # noqa: E501
        :rtype: str
        """
        return self._n4

    @n4.setter
    def n4(self, n4):
        """Sets the n4 of this VariableDetails.

        Nazwa czwartego wymiaru / The name of the fourth dimension  # noqa: E501

        :param n4: The n4 of this VariableDetails.  # noqa: E501
        :type: str
        """

        self._n4 = n4

    @property
    def n5(self):
        """Gets the n5 of this VariableDetails.  # noqa: E501

        Nazwa piątego wymiaru / The name of the fifth dimension  # noqa: E501

        :return: The n5 of this VariableDetails.  # noqa: E501
        :rtype: str
        """
        return self._n5

    @n5.setter
    def n5(self, n5):
        """Sets the n5 of this VariableDetails.

        Nazwa piątego wymiaru / The name of the fifth dimension  # noqa: E501

        :param n5: The n5 of this VariableDetails.  # noqa: E501
        :type: str
        """

        self._n5 = n5

    @property
    def level(self):
        """Gets the level of this VariableDetails.  # noqa: E501

        Poziom agregacji cechy / Variable agregate level  # noqa: E501

        :return: The level of this VariableDetails.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this VariableDetails.

        Poziom agregacji cechy / Variable agregate level  # noqa: E501

        :param level: The level of this VariableDetails.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def measure_unit_id(self):
        """Gets the measure_unit_id of this VariableDetails.  # noqa: E501

        Identyfikator jednostki miary / Measure unit identifier  # noqa: E501

        :return: The measure_unit_id of this VariableDetails.  # noqa: E501
        :rtype: int
        """
        return self._measure_unit_id

    @measure_unit_id.setter
    def measure_unit_id(self, measure_unit_id):
        """Sets the measure_unit_id of this VariableDetails.

        Identyfikator jednostki miary / Measure unit identifier  # noqa: E501

        :param measure_unit_id: The measure_unit_id of this VariableDetails.  # noqa: E501
        :type: int
        """

        self._measure_unit_id = measure_unit_id

    @property
    def measure_unit_name(self):
        """Gets the measure_unit_name of this VariableDetails.  # noqa: E501

        Nazwa jednostki miary / Measure unit name  # noqa: E501

        :return: The measure_unit_name of this VariableDetails.  # noqa: E501
        :rtype: str
        """
        return self._measure_unit_name

    @measure_unit_name.setter
    def measure_unit_name(self, measure_unit_name):
        """Sets the measure_unit_name of this VariableDetails.

        Nazwa jednostki miary / Measure unit name  # noqa: E501

        :param measure_unit_name: The measure_unit_name of this VariableDetails.  # noqa: E501
        :type: str
        """

        self._measure_unit_name = measure_unit_name

    @property
    def description(self):
        """Gets the description of this VariableDetails.  # noqa: E501

        Opis cechy / Variable description  # noqa: E501

        :return: The description of this VariableDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VariableDetails.

        Opis cechy / Variable description  # noqa: E501

        :param description: The description of this VariableDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def years(self):
        """Gets the years of this VariableDetails.  # noqa: E501

        Lata obowiązywania cechy / Years of variable validity  # noqa: E501

        :return: The years of this VariableDetails.  # noqa: E501
        :rtype: list[int]
        """
        return self._years

    @years.setter
    def years(self, years):
        """Sets the years of this VariableDetails.

        Lata obowiązywania cechy / Years of variable validity  # noqa: E501

        :param years: The years of this VariableDetails.  # noqa: E501
        :type: list[int]
        """

        self._years = years

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariableDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariableDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
