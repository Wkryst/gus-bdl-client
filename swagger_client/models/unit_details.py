# coding: utf-8

"""
    BDL API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UnitDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'parent_id': 'str',
        'level': 'int',
        'kind': 'str',
        'has_description': 'bool',
        'description': 'str',
        'years': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'parent_id': 'parentId',
        'level': 'level',
        'kind': 'kind',
        'has_description': 'hasDescription',
        'description': 'description',
        'years': 'years'
    }

    def __init__(self, id=None, name=None, parent_id=None, level=None, kind=None, has_description=None, description=None, years=None):  # noqa: E501
        """UnitDetails - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._parent_id = None
        self._level = None
        self._kind = None
        self._has_description = None
        self._description = None
        self._years = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if parent_id is not None:
            self.parent_id = parent_id
        if level is not None:
            self.level = level
        if kind is not None:
            self.kind = kind
        if has_description is not None:
            self.has_description = has_description
        if description is not None:
            self.description = description
        if years is not None:
            self.years = years

    @property
    def id(self):
        """Gets the id of this UnitDetails.  # noqa: E501

        Identyfikator jednostki terytorialnej / Territorial unit identifier  # noqa: E501

        :return: The id of this UnitDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UnitDetails.

        Identyfikator jednostki terytorialnej / Territorial unit identifier  # noqa: E501

        :param id: The id of this UnitDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UnitDetails.  # noqa: E501

        Nazwa jednostki terytorialnej / Territorial unit name  # noqa: E501

        :return: The name of this UnitDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UnitDetails.

        Nazwa jednostki terytorialnej / Territorial unit name  # noqa: E501

        :param name: The name of this UnitDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this UnitDetails.  # noqa: E501

        Identyfikator nadrzędny jednostki terytorialnej / Parent territorial unit identifier  # noqa: E501

        :return: The parent_id of this UnitDetails.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this UnitDetails.

        Identyfikator nadrzędny jednostki terytorialnej / Parent territorial unit identifier  # noqa: E501

        :param parent_id: The parent_id of this UnitDetails.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def level(self):
        """Gets the level of this UnitDetails.  # noqa: E501

        Poziom jednostki terytorialnej / Territorial unit level  # noqa: E501

        :return: The level of this UnitDetails.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this UnitDetails.

        Poziom jednostki terytorialnej / Territorial unit level  # noqa: E501

        :param level: The level of this UnitDetails.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def kind(self):
        """Gets the kind of this UnitDetails.  # noqa: E501

        Rodzaj jednostki terytorialnej / Territorial unit kind  # noqa: E501

        :return: The kind of this UnitDetails.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this UnitDetails.

        Rodzaj jednostki terytorialnej / Territorial unit kind  # noqa: E501

        :param kind: The kind of this UnitDetails.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def has_description(self):
        """Gets the has_description of this UnitDetails.  # noqa: E501

        Czy jednostka terytorialna posiada opis / Does territorial unit has description  # noqa: E501

        :return: The has_description of this UnitDetails.  # noqa: E501
        :rtype: bool
        """
        return self._has_description

    @has_description.setter
    def has_description(self, has_description):
        """Sets the has_description of this UnitDetails.

        Czy jednostka terytorialna posiada opis / Does territorial unit has description  # noqa: E501

        :param has_description: The has_description of this UnitDetails.  # noqa: E501
        :type: bool
        """

        self._has_description = has_description

    @property
    def description(self):
        """Gets the description of this UnitDetails.  # noqa: E501

        Opis jednostki terytorialnej / Territorial unit description  # noqa: E501

        :return: The description of this UnitDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UnitDetails.

        Opis jednostki terytorialnej / Territorial unit description  # noqa: E501

        :param description: The description of this UnitDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def years(self):
        """Gets the years of this UnitDetails.  # noqa: E501

        Lata obowiązywania jednostki terytorialnej / Years of territorial unit validity  # noqa: E501

        :return: The years of this UnitDetails.  # noqa: E501
        :rtype: list[int]
        """
        return self._years

    @years.setter
    def years(self, years):
        """Sets the years of this UnitDetails.

        Lata obowiązywania jednostki terytorialnej / Years of territorial unit validity  # noqa: E501

        :param years: The years of this UnitDetails.  # noqa: E501
        :type: list[int]
        """

        self._years = years

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnitDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnitDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
