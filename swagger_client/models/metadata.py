# coding: utf-8

"""
    BDL API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Metadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'url': 'str',
        'provider': 'str',
        'date_modified': 'datetime',
        'description': 'str',
        'keywords': 'str',
        'temporal_coverage': 'str',
        'language': 'str',
        'update_period': 'str',
        'content_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'url': 'url',
        'provider': 'provider',
        'date_modified': 'dateModified',
        'description': 'description',
        'keywords': 'keywords',
        'temporal_coverage': 'temporalCoverage',
        'language': 'language',
        'update_period': 'updatePeriod',
        'content_type': 'contentType'
    }

    def __init__(self, id=None, title=None, url=None, provider=None, date_modified=None, description=None, keywords=None, temporal_coverage=None, language=None, update_period=None, content_type=None):  # noqa: E501
        """Metadata - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._url = None
        self._provider = None
        self._date_modified = None
        self._description = None
        self._keywords = None
        self._temporal_coverage = None
        self._language = None
        self._update_period = None
        self._content_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url
        if provider is not None:
            self.provider = provider
        if date_modified is not None:
            self.date_modified = date_modified
        if description is not None:
            self.description = description
        if keywords is not None:
            self.keywords = keywords
        if temporal_coverage is not None:
            self.temporal_coverage = temporal_coverage
        if language is not None:
            self.language = language
        if update_period is not None:
            self.update_period = update_period
        if content_type is not None:
            self.content_type = content_type

    @property
    def id(self):
        """Gets the id of this Metadata.  # noqa: E501

        Id metadanych / Matadata's id  # noqa: E501

        :return: The id of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metadata.

        Id metadanych / Matadata's id  # noqa: E501

        :param id: The id of this Metadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Metadata.  # noqa: E501

        Nazwa zasobu / Resource name  # noqa: E501

        :return: The title of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Metadata.

        Nazwa zasobu / Resource name  # noqa: E501

        :param title: The title of this Metadata.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this Metadata.  # noqa: E501

        Url zasobu / Resource Url  # noqa: E501

        :return: The url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Metadata.

        Url zasobu / Resource Url  # noqa: E501

        :param url: The url of this Metadata.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def provider(self):
        """Gets the provider of this Metadata.  # noqa: E501

        Dostawca zasobu / Resource provider  # noqa: E501

        :return: The provider of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Metadata.

        Dostawca zasobu / Resource provider  # noqa: E501

        :param provider: The provider of this Metadata.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def date_modified(self):
        """Gets the date_modified of this Metadata.  # noqa: E501

        Data ostatniej modyfikacji / Last modification date  # noqa: E501

        :return: The date_modified of this Metadata.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this Metadata.

        Data ostatniej modyfikacji / Last modification date  # noqa: E501

        :param date_modified: The date_modified of this Metadata.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def description(self):
        """Gets the description of this Metadata.  # noqa: E501

        Opis zasobu / Resource description  # noqa: E501

        :return: The description of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Metadata.

        Opis zasobu / Resource description  # noqa: E501

        :param description: The description of this Metadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def keywords(self):
        """Gets the keywords of this Metadata.  # noqa: E501

        Słowa kluczowe / Describing keywords  # noqa: E501

        :return: The keywords of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Metadata.

        Słowa kluczowe / Describing keywords  # noqa: E501

        :param keywords: The keywords of this Metadata.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def temporal_coverage(self):
        """Gets the temporal_coverage of this Metadata.  # noqa: E501

          # noqa: E501

        :return: The temporal_coverage of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._temporal_coverage

    @temporal_coverage.setter
    def temporal_coverage(self, temporal_coverage):
        """Sets the temporal_coverage of this Metadata.

          # noqa: E501

        :param temporal_coverage: The temporal_coverage of this Metadata.  # noqa: E501
        :type: str
        """

        self._temporal_coverage = temporal_coverage

    @property
    def language(self):
        """Gets the language of this Metadata.  # noqa: E501

        Języki prezentowania zasobu / Resource's languages  # noqa: E501

        :return: The language of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Metadata.

        Języki prezentowania zasobu / Resource's languages  # noqa: E501

        :param language: The language of this Metadata.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def update_period(self):
        """Gets the update_period of this Metadata.  # noqa: E501

        Częstotliwość aktualizacji / Update frequency  # noqa: E501

        :return: The update_period of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._update_period

    @update_period.setter
    def update_period(self, update_period):
        """Sets the update_period of this Metadata.

        Częstotliwość aktualizacji / Update frequency  # noqa: E501

        :param update_period: The update_period of this Metadata.  # noqa: E501
        :type: str
        """

        self._update_period = update_period

    @property
    def content_type(self):
        """Gets the content_type of this Metadata.  # noqa: E501

        Typ treści / Content type  # noqa: E501

        :return: The content_type of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Metadata.

        Typ treści / Content type  # noqa: E501

        :param content_type: The content_type of this Metadata.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Metadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
